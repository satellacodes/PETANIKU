{
  "name": "petaniku-frontend",
  "version": "0.1.0",
  "private": true,
  "homepage": ".",
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "@types/jest": "^27.5.2",
    "@types/node": "^16.18.48",
    "@types/react": "^18.2.21",
    "@types/react-dom": "^18.2.7",
    "axios": "^1.6.8",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.18.0",
    "react-scripts": "5.0.1",
    "typescript": "^4.9.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "svgo": "^3.0.0",
    "workbox-google-analytics": "^7.0.0",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.31",
    "tailwindcss": "^3.3.3"
  }
}
// postcss.config.js
const tailwindcss = require("tailwindcss");
module.exports = {
  plugins: [tailwindcss("./tailwind.config.js"), require("autoprefixer")],
};
/*
  Content-Type: text/html
  X-Frame-Options: DENY
  X-Content-Type-Options: nosniff

/static/*
  Content-Type: text/css
  Cache-Control: public, max-age=31536000, immutable
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="PETANIKU - Platform jual beli sayur langsung dari petani"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <title>PETANIKU</title>
    <style>
      body {
        font-family: "Poppins", sans-serif;
      }
    </style>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>
import React, { useEffect } from "react";
import { Routes, Route, useNavigate, useLocation } from "react-router-dom";
import { useAuth } from "./context/AuthContext";
import MainLayout from "./components/layout/MainLayout";
import Home from "./pages/Home";
import Login from "./components/auth/Login";
import Register from "./components/auth/Register";
import ProductList from "./components/buyer/ProductList";
import ProductDetail from "./pages/ProductDetail";
import Profile from "./pages/Profile";
import FarmerProfile from "./pages/FarmerProfile";
import Cart from "./components/buyer/Cart";
import Checkout from "./components/buyer/Checkout";
import FarmerDashboard from "./components/farmer/Dashboard";
import ProductForm from "./components/farmer/ProductForm";
import NotFound from "./pages/NotFound";
import ProtectedRoute from "./components/common/ProtectedRoute";

function AppRouter() {
  const { redirect } = useAuth();
  const navigate = useNavigate();
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const location = useLocation();

  useEffect(() => {
    if (redirect) {
      navigate(redirect);
    }
  }, [redirect, navigate]);

  return (
    <Routes>
      <Route path="/" element={<Home />} />
      <Route path="/login" element={<Login />} />
      <Route path="/register" element={<Register />} />
      <Route path="/products" element={<ProductList />} />
      <Route path="/product/:id" element={<ProductDetail />} />
      <Route
        path="/profile"
        element={
          <ProtectedRoute>
            <Profile />
          </ProtectedRoute>
        }
      />
      <Route path="/farmer/:id" element={<FarmerProfile />} />
      <Route
        path="/cart"
        element={
          <ProtectedRoute>
            <Cart />
          </ProtectedRoute>
        }
      />
      <Route
        path="/checkout"
        element={
          <ProtectedRoute>
            <Checkout />
          </ProtectedRoute>
        }
      />
      <Route
        path="/farmer/dashboard"
        element={
          <ProtectedRoute allowedRoles={["farmer"]}>
            <FarmerDashboard />
          </ProtectedRoute>
        }
      />
      <Route
        path="/farmer/products/new"
        element={
          <ProtectedRoute allowedRoles={["farmer"]}>
            <ProductForm />
          </ProtectedRoute>
        }
      />
      <Route
        path="/farmer/products/edit/:id"
        element={
          <ProtectedRoute allowedRoles={["farmer"]}>
            <ProductForm />
          </ProtectedRoute>
        }
      />
      <Route path="*" element={<NotFound />} />
    </Routes>
  );
}

function App() {
  return (
    <MainLayout>
      <AppRouter />
    </MainLayout>
  );
}

export default App;
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";

const Login: React.FC = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await login(email, password);
    } catch (err) {
      setError("Failed to login. Please check your credentials.");
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Masuk ke Akunmu
          </h2>
        </div>
        {error && <div className="text-red-500 text-center">{error}</div>}
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="email-address" className="sr-only">
                Email address
              </label>
              <input
                id="email-address"
                name="email"
                type="email"
                autoComplete="email"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="Alamat Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <div>
              <label htmlFor="password" className="sr-only">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="current-password"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <input
                id="remember-me"
                name="remember-me"
                type="checkbox"
                className="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
              />
              <label
                htmlFor="remember-me"
                className="ml-2 block text-sm text-gray-900"
              >
                Ingat aku
              </label>
            </div>

            <div className="text-sm">
              <button
                type="button"
                onClick={() => alert("mohon maaf fitur ini belum tersedia :V")}
                className="font-medium text-green-600 hover:text-green-500"
              >
                lupa passwordmu?
              </button>
            </div>
          </div>

          <div>
            <button
              type="submit"
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
            >
              Masuk
            </button>
          </div>
        </form>
        <div className="text-center">
          <p className="text-sm text-gray-600">
            Tidak punya akun?{" "}
            <button
              type="button"
              onClick={() => navigate("/register")}
              className="font-medium text-green-600 hover:text-green-500"
            >
              Daftar
            </button>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Login;
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";

const Register: React.FC = () => {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [password, setPassword] = useState("");
  const [role, setRole] = useState<"buyer" | "farmer">("buyer");
  const [location, setLocation] = useState("");
  const [description, setDescription] = useState("");
  const [error, setError] = useState("");
  const { register } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await register({
        name,
        email,
        phone,
        password,
        role,
        location,
        description,
      });
    } catch (err) {
      setError("Failed to register. Please try again.");
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">
            Buat akun PETANIKU
          </h2>
        </div>
        {error && <div className="text-red-500 text-center">{error}</div>}
        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          <div className="rounded-md shadow-sm -space-y-px">
            <div>
              <label htmlFor="name" className="sr-only">
                Full Name
              </label>
              <input
                id="name"
                name="name"
                type="text"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="Nama lengkapmu"
                value={name}
                onChange={(e) => setName(e.target.value)}
              />
            </div>
            <div>
              <label htmlFor="email" className="sr-only">
                Email address
              </label>
              <input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="Alamat Emailmu"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </div>
            <div>
              <label htmlFor="phone" className="sr-only">
                Phone Number
              </label>
              <input
                id="phone"
                name="phone"
                type="tel"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="Nomor telepon yang bisa dihubungi"
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
              />
            </div>
            <div>
              <label htmlFor="password" className="sr-only">
                Password
              </label>
              <input
                id="password"
                name="password"
                type="password"
                required
                className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700">
                Role
              </label>
              <div className="mt-1 flex">
                <label className="inline-flex items-center mr-4">
                  <input
                    type="radio"
                    className="form-radio"
                    name="role"
                    value="buyer"
                    checked={role === "buyer"}
                    onChange={() => setRole("buyer")}
                  />
                  <span className="ml-2">Buyer</span>
                </label>
                <label className="inline-flex items-center">
                  <input
                    type="radio"
                    className="form-radio"
                    name="role"
                    value="farmer"
                    checked={role === "farmer"}
                    onChange={() => setRole("farmer")}
                  />
                  <span className="ml-2">Farmer</span>
                </label>
              </div>
            </div>
            {role === "farmer" && (
              <>
                <div>
                  <label htmlFor="location" className="sr-only">
                    Location
                  </label>
                  <select
                    id="location"
                    name="location"
                    required
                    className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                    value={location}
                    onChange={(e) => setLocation(e.target.value)}
                  >
                    <option value="">Select Location</option>
                    {[
                      "Cilacap",
                      "Banyumas",
                      "Purbalingga",
                      "Banjarnegara",
                      "Kebumen",
                      "Purworejo",
                      "Wonosobo",
                      "Magelang",
                      "Boyolali",
                      "Klaten",
                      "Sukoharjo",
                      "Wonogiri",
                      "Karanganyar",
                      "Sragen",
                      "Grobogan",
                      "Blora",
                      "Rembang",
                      "Pati",
                      "Kudus",
                      "Jepara",
                      "Demak",
                      "Semarang",
                      "Temanggung",
                      "Kendal",
                      "Batang",
                      "Pekalongan",
                      "Pemalang",
                      "Tegal",
                      "Brebes",
                    ].map((kab) => (
                      <option key={kab} value={kab}>
                        {kab}
                      </option>
                    ))}
                  </select>
                </div>
                <div>
                  <label htmlFor="description" className="sr-only">
                    Description
                  </label>
                  <textarea
                    id="description"
                    name="description"
                    rows={3}
                    className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-green-500 focus:border-green-500 focus:z-10 sm:text-sm"
                    placeholder="Description about your farm"
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                  />
                </div>
              </>
            )}
          </div>

          {error && (
            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
              <strong>Error!</strong> {error}
            </div>
          )}

          {error?.includes("500") && (
            <div className="mt-4 text-orange-600">
              Server sedang mengalami masalah. Silakan coba lagi nanti.
            </div>
          )}

          <div>
            <button
              type="submit"
              className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
            >
              Register
            </button>
          </div>
        </form>
        <div className="text-center">
          <p className="text-sm text-gray-600">
            Sudah punya akun?{" "}
            <button
              onClick={() => navigate("/login")}
              className="font-medium text-green-600 hover:text-green-500"
            >
              Masuk disini
            </button>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Register;
import React, { useState } from "react";
import { Link } from "react-router-dom";

const Cart: React.FC = () => {
  const [cartItems, setCartItems] = useState([]);

  const updateQuantity = (id: string, quantity: number) => {
    if (quantity < 1) return;
    setCartItems(
      cartItems.map((item) => (item.id === id ? { ...item, quantity } : item)),
    );
  };

  const removeItem = (id: string) => {
    setCartItems(cartItems.filter((item) => item.id !== id));
  };

  const subtotal = cartItems.reduce(
    (sum, item) => sum + item.price * item.quantity,
    0,
  );

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Keranjang Belanja</h1>

      {cartItems.length === 0 ? (
        <div className="text-center py-12">
          <h2 className="text-xl font-semibold mb-4">
            Keranjang belanja Anda kosong
          </h2>
          <Link to="/products" className="text-green-600 hover:underline">
            Mulai berbelanja
          </Link>
        </div>
      ) : (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            <div className="bg-white shadow rounded-lg">
              <div className="p-6">
                {cartItems.map((item) => (
                  <div
                    key={item.id}
                    className="flex flex-col sm:flex-row items-center py-4 border-b"
                  >
                    <div className="flex-shrink-0 w-24 h-24 bg-gray-200 rounded-lg"></div>
                    <div className="mt-4 sm:mt-0 sm:ml-6 flex-grow">
                      <h3 className="text-lg font-medium">{item.name}</h3>
                      <p className="text-gray-500">{item.farmer}</p>
                      <p className="text-green-600 font-semibold">
                        Rp{item.price.toLocaleString()}
                      </p>
                    </div>
                    <div className="mt-4 sm:mt-0 flex items-center">
                      <button
                        onClick={() =>
                          updateQuantity(item.id, item.quantity - 1)
                        }
                        className="text-gray-500 hover:text-gray-700"
                      >
                        -
                      </button>
                      <span className="mx-2">{item.quantity}</span>
                      <button
                        onClick={() =>
                          updateQuantity(item.id, item.quantity + 1)
                        }
                        className="text-gray-500 hover:text-gray-700"
                      >
                        +
                      </button>
                      <button
                        onClick={() => removeItem(item.id)}
                        className="ml-4 text-red-500 hover:text-red-700"
                      >
                        Hapus
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          <div className="lg:col-span-1">
            <div className="bg-white shadow rounded-lg p-6">
              <h2 className="text-xl font-semibold mb-4">Ringkasan Belanja</h2>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span>Subtotal</span>
                  <span>Rp{subtotal.toLocaleString()}</span>
                </div>
                <div className="flex justify-between">
                  <span>Pengiriman</span>
                  <span>Rp10,000</span>
                </div>
                <div className="flex justify-between font-bold text-lg pt-2 border-t">
                  <span>Total</span>
                  <span>Rp{(subtotal + 10000).toLocaleString()}</span>
                </div>
                <Link
                  to="/checkout"
                  className="block mt-6 w-full bg-green-600 text-white text-center py-2 rounded-md hover:bg-green-700"
                >
                  Lanjut ke Pembayaran
                </Link>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Cart;
import React, { useState } from "react";

const Checkout: React.FC = () => {
  const [formData, setFormData] = useState({
    name: "",
    address: "",
    city: "",
    postalCode: "",
    phone: "",
    paymentMethod: "cod",
  });

  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >,
  ) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Process checkout
    alert("Pesanan berhasil ditempatkan!");
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Checkout</h1>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2">
          <div className="bg-white shadow rounded-lg p-6 mb-6">
            <h2 className="text-xl font-semibold mb-4">Alamat Pengiriman</h2>
            <form onSubmit={handleSubmit}>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nama Lengkap
                  </label>
                  <input
                    type="text"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    className="w-full p-2 border border-gray-300 rounded-md"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Nomor Telepon
                  </label>
                  <input
                    type="tel"
                    name="phone"
                    value={formData.phone}
                    onChange={handleChange}
                    className="w-full p-2 border border-gray-300 rounded-md"
                    required
                  />
                </div>
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Alamat Lengkap
                </label>
                <textarea
                  name="address"
                  value={formData.address}
                  onChange={handleChange}
                  rows={3}
                  className="w-full p-2 border border-gray-300 rounded-md"
                  required
                ></textarea>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Kota/Kabupaten
                  </label>
                  <input
                    type="text"
                    name="city"
                    value={formData.city}
                    onChange={handleChange}
                    className="w-full p-2 border border-gray-300 rounded-md"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Kode Pos
                  </label>
                  <input
                    type="text"
                    name="postalCode"
                    value={formData.postalCode}
                    onChange={handleChange}
                    className="w-full p-2 border border-gray-300 rounded-md"
                    required
                  />
                </div>
              </div>

              <h2 className="text-xl font-semibold mb-4">Metode Pembayaran</h2>
              <div className="mb-4">
                <label className="flex items-center">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="cod"
                    checked={formData.paymentMethod === "cod"}
                    onChange={handleChange}
                    className="form-radio"
                  />
                  <span className="ml-2">Bayar di Tempat (COD)</span>
                </label>
                <label className="flex items-center mt-2">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="transfer"
                    onChange={handleChange}
                    className="form-radio"
                  />
                  <span className="ml-2">Transfer Bank</span>
                </label>
              </div>

              <button
                type="submit"
                className="w-full bg-green-600 text-white py-2 rounded-md hover:bg-green-700"
              >
                Konfirmasi Pesanan
              </button>
            </form>
          </div>
        </div>

        <div className="lg:col-span-1">
          <div className="bg-white shadow rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-4">Ringkasan Pesanan</h2>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span>Subtotal Produk</span>
                <span>Rp35,000</span>
              </div>
              <div className="flex justify-between">
                <span>Biaya Pengiriman</span>
                <span>Rp10,000</span>
              </div>
              <div className="flex justify-between font-bold text-lg pt-2 border-t">
                <span>Total</span>
                <span>Rp45,000</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Checkout;
import React from "react";
import { Link } from "react-router-dom";

interface ProductCardProps {
  product: {
    id: string;
    name: string;
    image: string;
    price: number;
    tags: string[];
    farmer: {
      id: string;
      name: string;
      location: string;
    };
  };
}

const ProductCard: React.FC<ProductCardProps> = ({ product }) => {
  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden transition-transform duration-200 hover:shadow-lg hover:-translate-y-1">
      <Link to={`/product/${product.id}`}>
        <div className="aspect-w-16 aspect-h-9">
          <img
            src={product.image}
            alt={product.name}
            className="w-full h-48 object-cover"
          />
        </div>
        <div className="p-4">
          <h3 className="text-lg font-semibold text-gray-900">
            {product.name}
          </h3>
          <p className="text-green-600 font-bold mt-1">
            Rp{product.price.toLocaleString()}
          </p>
          <div className="flex flex-wrap mt-2 gap-1">
            {product.tags.map((tag, index) => (
              <span
                key={index}
                className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded"
              >
                {tag}
              </span>
            ))}
          </div>
          <div className="mt-3 flex items-center">
            <div>
              <p className="text-sm font-medium text-gray-900">
                {product.farmer.name}
              </p>
              <p className="text-sm text-gray-500">{product.farmer.location}</p>
            </div>
          </div>
        </div>
      </Link>
    </div>
  );
};

export default ProductCard;
import React, { useEffect, useState } from "react";
import ProductCard from "./ProductCard";
import { fetchProducts } from "../../services/productService";
import { useAuth } from "../../context/AuthContext";

const ProductList: React.FC = () => {
  const [products, setProducts] = useState<any[]>([]);
  const [filters, setFilters] = useState({
    location: "",
    tag: "",
    sort: "",
    search: "",
  });
  const { user } = useAuth();

  useEffect(() => {
    const loadProducts = async () => {
      try {
        const data = await fetchProducts(filters);
        setProducts(data);
      } catch (error) {
        console.error("Failed to load products", error);
      }
    };

    if (user) loadProducts();
  }, [filters, user]);

  const handleFilterChange = (
    e: React.ChangeEvent<HTMLSelectElement | HTMLInputElement>,
  ) => {
    const { name, value } = e.target;
    setFilters({ ...filters, [name]: value });
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex flex-col md:flex-row justify-between mb-6">
        <h1 className="text-3xl font-bold mb-4">Daftar Produk</h1>

        <div className="flex flex-wrap gap-4">
          <input
            type="text"
            name="search"
            placeholder="Cari sayur..."
            className="border rounded p-2"
            value={filters.search}
            onChange={handleFilterChange}
          />
          <select
            name="location"
            onChange={handleFilterChange}
            className="border rounded p-2"
            value={filters.location}
          >
            <option value="">Semua Lokasi</option>
            {[
              "Cilacap",
              "Banyumas",
              "Purbalingga",
              "Banjarnegara",
              "Kebumen",
              "Purworejo",
              "Wonosobo",
              "Magelang",
              "Boyolali",
              "Klaten",
              "Sukoharjo",
              "Wonogiri",
              "Karanganyar",
              "Sragen",
              "Grobogan",
              "Blora",
              "Rembang",
              "Pati",
              "Kudus",
              "Jepara",
              "Demak",
              "Semarang",
              "Temanggung",
              "Kendal",
              "Batang",
              "Pekalongan",
              "Pemalang",
              "Tegal",
              "Brebes",
            ].map((loc) => (
              <option key={loc} value={loc}>
                {loc}
              </option>
            ))}
          </select>

          <select
            name="tag"
            onChange={handleFilterChange}
            className="border rounded p-2"
            value={filters.tag}
          >
            <option value="">Semua Kategori</option>
            <option value="organik">Organik</option>
            <option value="hidroponik">Hidroponik</option>
            <option value="segar">Segar</option>
            <option value="lokal">Lokal</option>
          </select>

          <select
            name="sort"
            onChange={handleFilterChange}
            className="border rounded p-2"
            value={filters.sort}
          >
            <option value="">Urutkan</option>
            <option value="popular">Terpopuler</option>
            <option value="lowest">Harga Terendah</option>
            <option value="highest">Harga Tertinggi</option>
            <option value="newest">Terbaru</option>
          </select>
        </div>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {products.map((product) => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  );
};

export default ProductList;
import React, { useState } from "react";

const ChatInterface: React.FC = () => {
  const [isOpen, setIsOpen] = useState("");
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState([
    { id: "1", text: "Halo, ada yang bisa saya bantu?", sender: "farmer" },
  ]);

  const handleSend = () => {
    if (message.trim()) {
      setMessages([
        ...messages,
        { id: Date.now().toString(), text: message, sender: "me" },
      ]);
      setMessage("");
    }
  };

  return (
    <>
      <button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-4 right-4 bg-green-600 text-white p-3 rounded-full shadow-lg z-50"
      >
        💬
      </button>

      <div
        className={`fixed bottom-16 right-4 w-80 bg-white shadow-lg rounded-t-lg z-50 transition-transform ${
          isOpen ? "translate-y-0" : "translate-y-full"
        }`}
      >
        <div className="bg-green-600 text-white p-3 rounded-t-lg flex justify-between items-center">
          <h3 className="font-semibold">Chat Petani</h3>
          <button onClick={() => setIsOpen(false)}>✕</button>
        </div>

        <div className="h-80 overflow-y-auto p-3">
          {messages.map((msg) => (
            <div
              key={msg.id}
              className={`mb-2 ${msg.sender === "me" ? "text-right" : ""}`}
            >
              <div
                className={`inline-block p-2 rounded-lg ${
                  msg.sender === "me"
                    ? "bg-green-100 text-gray-800"
                    : "bg-gray-200 text-gray-800"
                }`}
              >
                {msg.text}
              </div>
            </div>
          ))}
        </div>

        <div className="p-2 border-t flex">
          <input
            type="text"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="Ketik pesan..."
            className="flex-grow p-2 border rounded-l"
            onKeyPress={(e) => e.key === "Enter" && handleSend()}
          />
          <button
            onClick={handleSend}
            className="bg-green-600 text-white px-4 rounded-r"
          >
            Kirim
          </button>
        </div>
      </div>
    </>
  );
};

export default ChatInterface;
import React from "react";

const Footer: React.FC = () => {
  return (
    <footer className="bg-gray-800 text-white py-8">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
          <div>
            <h3 className="text-lg font-bold mb-4">PETANIKU</h3>
            <p className="text-gray-400">
              Platform jual beli sayuran langsung dari petani lokal.
            </p>
          </div>
          <div>
            <h4 className="text-lg font-semibold mb-4">Tautan</h4>
            <ul className="space-y-2">
              <li>
                <a href="/" className="text-gray-400 hover:text-white">
                  Beranda
                </a>
              </li>
              <li>
                <a href="/" className="text-gray-400 hover:text-white">
                  Produk
                </a>
              </li>
              <li>
                <a href="/" className="text-gray-400 hover:text-white">
                  Tentang Kami
                </a>
              </li>
              <li>
                <a href="/" className="text-gray-400 hover:text-white">
                  Kontak
                </a>
              </li>
            </ul>
          </div>
          <div>
            <h4 className="text-lg font-semibold mb-4">Kategori</h4>
            <ul className="space-y-2">
              <li>
                <a href="/" className="text-gray-400 hover:text-white">
                  Sayuran Organik
                </a>
              </li>
              <li>
                <a href="/" className="text-gray-400 hover:text-white">
                  Sayuran Hidroponik
                </a>
              </li>
              <li>
                <a href="/" className="text-gray-400 hover:text-white">
                  Sayuran Lokal
                </a>
              </li>
              <li>
                <a href="/" className="text-gray-400 hover:text-white">
                  Sayuran Segar
                </a>
              </li>
            </ul>
          </div>
          <div>
            <h4 className="text-lg font-semibold mb-4">Kontak</h4>
            <address className="text-gray-400 not-italic">
              Jl. jalan jalan no.123
              <br />
              Kebumen, Jawa Tengah
              <br />
              Indonesia
              <br />
              <br />
              Email: petaniku@info.com
              <br />
              Telp: (024) 1234567
            </address>
          </div>
        </div>
        <div className="border-t border-gray-700 mt-8 pt-6 text-center text-gray-400">
          &copy; {new Date().getFullYear()} PETANIKU. Hak Cipta Dilindungi.
        </div>
      </div>
    </footer>
  );
};

export default Footer;
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";

const Navbar: React.FC = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const { user, logout } = useAuth();
  const navigate = useNavigate();

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchTerm.trim()) {
      navigate(`/products?search=${searchTerm.trim()}`);
    }
  };

  return (
    <nav className="bg-green-600 text-white shadow-md">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          <div className="flex items-center">
            <Link to="/" className="text-xl font-bold">
              PETANIKU
            </Link>
          </div>

          <div className="flex-1 mx-10">
            <form onSubmit={handleSearch} className="max-w-md">
              <div className="relative">
                <input
                  type="text"
                  placeholder="Cari sayur..."
                  className="w-full py-2 px-4 rounded-full text-gray-800 focus:outline-none"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
                <button
                  type="submit"
                  className="absolute right-3 top-2 text-gray-500"
                >
                  🔍
                </button>
              </div>
            </form>
          </div>

          <div className="flex items-center">
            {user ? (
              <div className="relative">
                <button
                  onClick={() => setIsMenuOpen(!isMenuOpen)}
                  className="flex items-center space-x-2 focus:outline-none"
                >
                  <div className="bg-gray-200 border-2 border-dashed rounded-xl w-8 h-8" />
                  <span>{user.name}</span>
                </button>

                {isMenuOpen && (
                  <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 text-gray-800 z-50">
                    <Link
                      to={
                        user.role === "farmer"
                          ? "/farmer/dashboard"
                          : "/profile"
                      }
                      className="block px-4 py-2 hover:bg-gray-100"
                    >
                      Profil
                    </Link>
                    <Link
                      to="/cart"
                      className="block px-4 py-2 hover:bg-gray-100"
                    >
                      Keranjang
                    </Link>
                    <button
                      onClick={logout}
                      className="block w-full text-left px-4 py-2 hover:bg-gray-100"
                    >
                      Logout
                    </button>
                  </div>
                )}
              </div>
            ) : (
              <div className="flex space-x-4">
                <Link to="/login" className="hover:text-gray-200">
                  Login
                </Link>
                <Link to="/register" className="hover:text-gray-200">
                  Register
                </Link>
              </div>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
};

export default Navbar;
import React from "react";
import { Navigate, useLocation } from "react-router-dom";
import { useAuth } from "../../context/AuthContext";

interface ProtectedRouteProps {
  children: React.ReactElement;
  allowedRoles?: string[];
}

const ProtectedRoute: React.FC<ProtectedRouteProps> = ({
  children,
  allowedRoles,
}) => {
  const { user, loading } = useAuth();
  const location = useLocation();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-green-600"></div>
      </div>
    );
  }

  if (!user) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  if (allowedRoles && !allowedRoles.includes(user.role)) {
    return <Navigate to="/" replace />;
  }

  return children;
};

export default ProtectedRoute;
import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import NotificationSidebar from "./NotificationSidebar";
import { fetchProducts } from "../../services/productService";
import { fetchOrders } from "../../services/orderService";
import { useAuth } from "../../context/AuthContext";

const FarmerDashboard: React.FC = () => {
  const [products, setProducts] = useState<any[]>([]);
  const [orders, setOrders] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();

  useEffect(() => {
    const loadData = async () => {
      try {
        const [prodData, ordData] = await Promise.all([
          fetchProducts({ farmerId: user?.id }),
          fetchOrders(),
        ]);
        setProducts(prodData);
        setOrders(ordData);
      } catch (error) {
        console.error("Failed to load dashboard data", error);
      } finally {
        setLoading(false);
      }
    };

    if (user) loadData();
  }, [user]);

  if (loading) return <div>Loading...</div>;

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Dashboard Petani</h1>
        <div className="flex space-x-4">
          <Link
            to="/farmer/products/new"
            className="bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700"
          >
            Tambah Produk
          </Link>
          <NotificationSidebar />
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div>
          <h2 className="text-xl font-semibold mb-4">Produk Saya</h2>
          <div className="bg-white shadow rounded-lg overflow-hidden">
            {products.length === 0 ? (
              <div className="p-6 text-center">
                <p className="text-gray-500">Belum ada produk</p>
                <Link
                  to="/farmer/products/new"
                  className="text-green-600 hover:underline"
                >
                  Tambah produk pertama
                </Link>
              </div>
            ) : (
              <ul className="divide-y divide-gray-200">
                {products.map((product) => (
                  <li
                    key={product.id}
                    className="p-4 hover:bg-gray-50 flex justify-between items-center"
                  >
                    <div>
                      <h3 className="font-medium">{product.name}</h3>
                      <p className="text-green-600">
                        Rp{product.price.toLocaleString()}
                      </p>
                    </div>
                    <Link
                      to={`/farmer/products/edit/${product.id}`}
                      className="text-blue-600 hover:text-blue-800"
                    >
                      Edit
                    </Link>
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>

        <div>
          <h2 className="text-xl font-semibold mb-4">Pesanan Terbaru</h2>
          <div className="bg-white shadow rounded-lg overflow-hidden">
            {orders.length === 0 ? (
              <div className="p-6 text-center">
                <p className="text-gray-500">Belum ada pesanan</p>
              </div>
            ) : (
              <ul className="divide-y divide-gray-200">
                {orders.map((order) => (
                  <li key={order.id} className="p-4 hover:bg-gray-50">
                    <div className="flex justify-between">
                      <div>
                        <h3 className="font-medium">Pesanan #{order.id}</h3>
                        <p className="text-gray-500">{order.buyer.name}</p>
                      </div>
                      <span
                        className={`px-2 py-1 rounded-full text-xs ${
                          order.status === "pending"
                            ? "bg-yellow-100 text-yellow-800"
                            : order.status === "accepted"
                              ? "bg-green-100 text-green-800"
                              : "bg-red-100 text-red-800"
                        }`}
                      >
                        {order.status === "pending"
                          ? "Menunggu"
                          : order.status === "accepted"
                            ? "Diterima"
                            : "Ditolak"}
                      </span>
                    </div>
                    <p className="mt-2">
                      Total: Rp{order.total.toLocaleString()}
                    </p>
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default FarmerDashboard;
import React, { useState, useEffect } from "react";
import { useAuth } from "../../context/AuthContext";

const NotificationSidebar: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [notifications, setNotifications] = useState<any[]>([]);
  const { user } = useAuth();

  useEffect(() => {
    if (isOpen && user) {
      // Fetch notifications from API
      const mockNotifications = [
        {
          id: "1",
          message: "Pesanan baru #123 dari Ambarukmo",
          createdAt: new Date(),
          read: false,
        },
        {
          id: "2",
          message: "Pesanan #120 telah dibayar",
          createdAt: new Date(),
          read: true,
        },
      ];
      setNotifications(mockNotifications);
    }
  }, [isOpen, user]);

  const markAsRead = (id: string) => {
    setNotifications(
      notifications.map((notif) =>
        notif.id === id ? { ...notif, read: true } : notif,
      ),
    );
  };

  return (
    <>
      <button
        onClick={() => setIsOpen(true)}
        className="fixed right-4 top-4 bg-green-600 text-white p-3 rounded-full shadow-lg z-50"
      >
        🔔
      </button>

      <div
        className={`fixed inset-0 bg-black bg-opacity-50 z-40 transition-opacity ${
          isOpen ? "opacity-100" : "opacity-0 pointer-events-none"
        }`}
        onClick={() => setIsOpen(false)}
      ></div>

      <div
        className={`fixed top-0 right-0 h-full w-80 bg-white z-50 shadow-xl transform transition-transform ${
          isOpen ? "translate-x-0" : "translate-x-full"
        }`}
      >
        <div className="p-4 border-b">
          <h2 className="text-xl font-bold">Notifikasi</h2>
          <button
            onClick={() => setIsOpen(false)}
            className="absolute top-4 right-4 text-gray-500"
          >
            ✕
          </button>
        </div>

        <div className="overflow-y-auto h-full">
          {notifications.length > 0 ? (
            notifications.map((notification) => (
              <div
                key={notification.id}
                className={`p-4 border-b ${notification.read ? "bg-gray-50" : "bg-yellow-50"}`}
                onClick={() => markAsRead(notification.id)}
              >
                <p className="font-medium">{notification.message}</p>
                <p className="text-sm text-gray-500">
                  {new Date(notification.createdAt).toLocaleString()}
                </p>
              </div>
            ))
          ) : (
            <p className="p-4 text-center text-gray-500">
              Tidak ada notifikasi
            </p>
          )}
        </div>
      </div>
    </>
  );
};

export default NotificationSidebar;
import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import {
  fetchProductById,
  createProduct,
  updateProduct,
} from "../../services/productService";
import { useAuth } from "../../context/AuthContext";

const ProductForm: React.FC = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const { user } = useAuth();
  const [formData, setFormData] = useState({
    name: "",
    price: "",
    tags: "",
    image: null as File | null,
  });
  const [preview, setPreview] = useState<string | null>(null);
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (id) {
      const loadProduct = async () => {
        try {
          const product = await fetchProductById(id);
          setFormData({
            name: product.name,
            price: product.price.toString(),
            tags: product.tags.join(","),
            image: null,
          });
        } catch (error) {
          console.error("Failed to load product", error);
        }
      };
      loadProduct();
    }
  }, [id]);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
  ) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];
      setFormData({ ...formData, image: file });
      setPreview(URL.createObjectURL(file));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setError("");

    const productData = new FormData();
    productData.append("name", formData.name);
    productData.append("price", formData.price);
    productData.append("tags", formData.tags);
    if (formData.image) productData.append("image", formData.image);

    try {
      if (id) {
        await updateProduct(id, productData);
      } else {
        await createProduct(productData);
      }
      navigate("/farmer/dashboard");
    } catch (error: any) {
      setError(error.message || "Failed to save product");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">
        {id ? "Edit Produk" : "Tambah Produk Baru"}
      </h1>

      {error && (
        <div className="bg-red-100 text-red-700 p-4 rounded mb-4">{error}</div>
      )}

      <form onSubmit={handleSubmit} className="max-w-2xl">
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Nama Produk
          </label>
          <input
            type="text"
            name="name"
            value={formData.name}
            onChange={handleChange}
            className="w-full p-2 border border-gray-300 rounded-md"
            required
          />
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Harga (Rp)
          </label>
          <input
            type="number"
            name="price"
            value={formData.price}
            onChange={handleChange}
            className="w-full p-2 border border-gray-300 rounded-md"
            required
            min="0"
          />
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Tags (pisahkan dengan koma)
          </label>
          <input
            type="text"
            name="tags"
            value={formData.tags}
            onChange={handleChange}
            className="w-full p-2 border border-gray-300 rounded-md"
            placeholder="Contoh: organik, segar, lokal"
          />
        </div>

        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Gambar Produk (max 3MB)
          </label>
          <input
            type="file"
            accept="image/*"
            onChange={handleImageChange}
            className="w-full p-2 border border-gray-300 rounded-md"
            required={!id}
          />
          {preview && (
            <div className="mt-2">
              <img src={preview} alt="Preview" className="max-w-xs max-h-48" />
            </div>
          )}
        </div>

        <button
          type="submit"
          disabled={isLoading}
          className="bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 disabled:bg-gray-400"
        >
          {isLoading ? "Menyimpan..." : "Simpan Produk"}
        </button>
      </form>
    </div>
  );
};

export default ProductForm;
import React from "react";
import Navbar from "../common/Navbar";
import Footer from "../common/Footer";
import NotificationSidebar from "../farmer/NotificationSidebar";
import { useAuth } from "../../context/AuthContext";
import ChatInterface from "../common/ChatInterface";

interface MainLayoutProps {
  children: React.ReactNode;
}

const MainLayout: React.FC<MainLayoutProps> = ({ children }) => {
  const { user } = useAuth();

  return (
    <div className="flex flex-col min-h-screen">
      <Navbar />
      <main className="flex-grow">{children}</main>
      <Footer />
      {user && user.role === "farmer" && <NotificationSidebar />}
      {user && (user.role === "farmer") === "buyer" && <ChatInterface />}
    </div>
  );
};

export default MainLayout;
import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
  useCallback,
} from "react";
import { loginUser, registerUser, getProfile } from "../services/authService";
import api from "../services/api";

interface AuthContextType {
  user: any;
  login: (email: string, password: string) => Promise<void>;
  register: (data: RegisterData) => Promise<void>;
  logout: () => void;
  loading: boolean;
  redirect: string | null; // Tambahkan ini
  clearRedirect: () => void; // Tambahkan ini (opsional, untuk reset nilai)
}

interface RegisterData {
  name: string;
  email: string;
  phone: string;
  password: string;
  role: "buyer" | "farmer";
  location?: string;
  description?: string;
}

const AuthContext = createContext<AuthContextType | null>(null);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [redirect, setRedirect] = useState<string | null>(null);
  const clearRedirect = () => setRedirect(null);

  const logout = useCallback(() => {
    localStorage.removeItem("token");
    setUser(null);
    setRedirect("/login");
  }, []);

  const login = useCallback(async (email: string, password: string) => {
    try {
      const data = await loginUser(email, password);
      setUser(data.user);
      localStorage.setItem("token", data.token);
      setRedirect("/");
    } catch (error: any) {
      throw new Error(error.response?.data?.message || "Login failed");
    }
  }, []);

  const register = useCallback(async (data: RegisterData) => {
    try {
      const response = await registerUser(data);
      setUser(response.user);
      localStorage.setItem("token", response.token);
      setRedirect("/");
    } catch (error: any) {
      throw new Error(error.response?.data?.message || "Registration failed");
    }
  }, []);

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const refreshToken = useCallback(async () => {
    try {
      const response = await api.post("/auth/refresh");
      localStorage.setItem("token", response.data.token);
      return response.data.token;
    } catch (error) {
      logout();
      return null;
    }
  }, [logout]);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const token = localStorage.getItem("token");
        if (token) {
          const userData = await getProfile();
          setUser(userData);
        }
      } catch (error) {
        console.error("Failed to fetch user", error);
      } finally {
        setLoading(false);
      }
    };

    fetchUser();
  }, []);

  return (
    <AuthContext.Provider
      value={{
        user,
        login,
        register,
        logout,
        loading,
        redirect,
        clearRedirect,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) throw new Error("useAuth must be used within an AuthProvider");
  return context;
};
import React, {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
  useCallback,
} from "react";
import {
  getNotifications,
  markNotificationAsRead,
} from "../services/notificationService";
import { setupNotificationSocket } from "../services/notificationService";
import { useAuth } from "./AuthContext";
import { Notification } from "../services/notificationService";

interface NotificationContextType {
  notifications: Notification[];
  unreadCount: number;
  fetchNotifications: () => Promise<void>;
  markAsRead: (id: string) => Promise<void>;
}

const NotificationContext = createContext<NotificationContextType | null>(null);

export const NotificationProvider: React.FC<{ children: ReactNode }> = ({
  children,
}) => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const { user } = useAuth();

  const fetchNotifications = useCallback(async () => {
    if (!user) return;

    try {
      const data = await getNotifications();
      setNotifications(data);
      setUnreadCount(data.filter((n) => !n.read).length);
    } catch (error) {
      console.error("Failed to fetch notifications", error);
    }
  }, [user]);

  const markAsRead = useCallback(async (id: string) => {
    try {
      await markNotificationAsRead(id);
      setNotifications((prev) =>
        prev.map((notif) =>
          notif.id === id ? { ...notif, read: true } : notif,
        ),
      );
      setUnreadCount((prev) => prev - 1);
    } catch (error) {
      console.error("Failed to mark notification as read", error);
    }
  }, []);

  useEffect(() => {
    if (user) {
      fetchNotifications();

      // Setup WebSocket untuk notifikasi real-time
      const cleanupSocket = setupNotificationSocket(
        (newNotification: Notification) => {
          setNotifications((prev) => [newNotification, ...prev]);
          setUnreadCount((prev) => prev + 1);
        },
      );

      return () => {
        cleanupSocket();
      };
    }
  }, [user, fetchNotifications]);

  return (
    <NotificationContext.Provider
      value={{
        notifications,
        unreadCount,
        fetchNotifications,
        markAsRead,
      }}
    >
      {children}
    </NotificationContext.Provider>
  );
};

export const useNotifications = () => {
  const context = useContext(NotificationContext);
  if (!context)
    throw new Error(
      "useNotifications must be used within a NotificationProvider",
    );
  return context;
};
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family:
    -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu",
    "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family:
    source-code-pro, Menlo, Monaco, Consolas, "Courier New", monospace;
}
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter as Router } from "react-router-dom";
import "./index.css";
import App from "./App";
import { AuthProvider } from "./context/AuthContext";

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement,
);
root.render(
  <React.StrictMode>
    <Router>
      <AuthProvider>
        <App />
      </AuthProvider>
    </Router>
  </React.StrictMode>,
);
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import ProductCard from "../components/buyer/ProductCard";
import {
  fetchFarmerProfile,
  fetchFarmerProducts,
} from "../services/authService";
const FarmerProfile: React.FC = () => {
  const { id } = useParams();
  const [farmer, setFarmer] = useState<any>(null);
  const [products, setProducts] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    const loadData = async () => {
      try {
        const [farmerData, productsData] = await Promise.all([
          fetchFarmerProfile(id!),
          fetchFarmerProducts(id!),
        ]);
        setFarmer(farmerData);
        setProducts(productsData);
      } catch (error) {
        console.error("Failed to load farmer profile", error);
      } finally {
        setLoading(false);
      }
    };
    loadData();
  }, [id]);
  if (loading) return <div>Loading...</div>;
  if (!farmer) return <div>Farmer not found</div>;
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-white shadow rounded-lg p-6 mb-8">
        <div className="flex flex-col md:flex-row items-center">
          <div className="bg-gray-200 border-2 border-dashed rounded-xl w-32 h-32 mb-4 md:mb-0 md:mr-6" />
          <div>
            <h1 className="text-3xl font-bold">{farmer.name}</h1>
            <p className="text-gray-600">{farmer.location}</p>
            <p className="mt-3">{farmer.description}</p>
          </div>
        </div>
      </div>
      <h2 className="text-2xl font-bold mb-4">Produk yang Dijual</h2>
      {products.length === 0 ? (
        <p className="text-center py-8">Belum ada produk yang dijual</p>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {products.map((product) => (
            <ProductCard key={product.id} product={product} />
          ))}
        </div>
      )}
    </div>
  );
};
export default FarmerProfile;
import React from "react";
import { Link } from "react-router-dom";
import { useAuth } from "../context/AuthContext";

const Home: React.FC = () => {
  const { user } = useAuth();

  return (
    <div>
      <div className="relative h-screen bg-green-50">
        <div className="absolute inset-0 bg-black opacity-55"></div>
        <div className="absolute inset-0 flex items-center justify-center text-center px-4">
          <div className="text-white max-w-3xl">
            <h1 className="text-4xl md:text-6xl font-bold mb-6">
              Selamat Datang di PETANIKU
            </h1>
            <p className="text-xl mb-8">
              Platform jual beli sayuran segar langsung dari petani lokal
            </p>
            <div className="flex flex-col sm:flex-row justify-center gap-4">
              {user ? (
                <Link
                  to="/products"
                  className="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-full text-lg"
                >
                  Belanja Sekarang
                </Link>
              ) : (
                <>
                  <Link
                    to="/login"
                    className="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-full text-lg"
                  >
                    Masuk
                  </Link>
                  <Link
                    to="/register"
                    className="bg-white hover:bg-gray-100 text-green-600 font-bold py-3 px-6 rounded-full text-lg"
                  >
                    Daftar
                  </Link>
                </>
              )}
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto my-16 px-4">
        <div className="text-center mb-12">
          <h2 className="text-3xl font-bold mb-4">Mengapa Memilih Kami?</h2>
          <p className="text-gray-600 max-w-2xl mx-auto">
            karena tidak ada pilihan lain lagi selain kami{" "}
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {[
            {
              title: "Segar Langsung dari Petani",
              description:
                "Sayuran dipetik langsung dari kebun dan dikirim ke rumah Anda.",
              icon: "🥬",
            },
            {
              title: "Harga Terjangkau",
              description: "Harga lebih murah karena tanpa perantara.",
              icon: "💰",
            },
            {
              title: "Mendukung Petani Lokal",
              description:
                "Membantu meningkatkan kesejahteraan petani di Jawa Tengah.",
              icon: "👨‍🌾",
            },
          ].map((item, index) => (
            <div
              key={index}
              className="bg-white p-8 rounded-lg shadow-md text-center"
            >
              <div className="text-4xl mb-4">{item.icon}</div>
              <h3 className="text-xl font-semibold mb-2">{item.title}</h3>
              <p className="text-gray-600">{item.description}</p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Home;
import React from "react";
import { Link } from "react-router-dom";
const NotFound: React.FC = () => {
  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-50">
      <h1 className="text-9xl font-bold text-gray-800">404</h1>
      <h2 className="text-2xl font-medium text-gray-600 mb-6">
        Halaman tidak ditemukan
      </h2>
      <p className="text-gray-500 mb-8">
        Maaf, halaman yang Anda cari tidak ada.
      </p>
      <Link
        to="/"
        className="px-6 py-3 bg-green-600 text-white rounded-md hover:bg-green-700"
      >
        Kembali ke Beranda
      </Link>
    </div>
  );
};
export default NotFound;
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { fetchProductById } from "../services/productService";
import { useAuth } from "../context/AuthContext";
const ProductDetail: React.FC = () => {
  const { id } = useParams();
  const [product, setProduct] = useState<any>(null);
  const [quantity, setQuantity] = useState(1);
  const [loading, setLoading] = useState(true);
  const { user } = useAuth();
  useEffect(() => {
    const loadProduct = async () => {
      try {
        const data = await fetchProductById(id!);
        setProduct(data);
      } catch (error) {
        console.error("Failed to load product", error);
      } finally {
        setLoading(false);
      }
    };
    loadProduct();
  }, [id]);
  const handleAddToCart = () => {
    // Add to cart logic
    alert(`Added ${quantity} ${product.name} to cart`);
  };
  if (loading) return <div>Loading...</div>;
  if (!product) return <div>Product not found</div>;
  return (
    <div className="container mx-auto px-4 py-8">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div>
          <div className="bg-white p-6 rounded-lg shadow-md">
            <img
              src={product.image}
              alt={product.name}
              className="w-full h-96 object-contain"
            />
          </div>
        </div>

        <div>
          <h1 className="text-3xl font-bold mb-2">{product.name}</h1>
          <p className="text-2xl text-green-600 font-bold mb-4">
            Rp{product.price.toLocaleString()}
          </p>

          <div className="flex flex-wrap gap-2 mb-6">
            {product.tags.map((tag: string, index: number) => (
              <span
                key={index}
                className="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm"
              >
                {tag}
              </span>
            ))}
          </div>

          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Deskripsi Produk</h2>
            <p className="text-gray-700">
              {product.description || "Tidak ada deskripsi"}
            </p>
          </div>

          <div className="mb-6">
            <h2 className="text-xl font-semibold mb-2">Petani</h2>
            <div className="flex items-center">
              <div className="bg-gray-200 border-2 border-dashed rounded-xl w-16 h-16" />
              <div className="ml-4">
                <h3 className="font-medium">{product.farmer.name}</h3>
                <p className="text-gray-600">{product.farmer.location}</p>
              </div>
            </div>
          </div>

          {user && user.role === "buyer" && (
            <div className="border-t pt-6">
              <div className="flex items-center mb-4">
                <label className="mr-4">Jumlah:</label>
                <div className="flex items-center">
                  <button
                    className="bg-gray-200 px-3 py-1 rounded-l"
                    onClick={() => setQuantity((prev) => Math.max(1, prev - 1))}
                  >
                    -
                  </button>
                  <span className="px-4 py-1 border-y border-gray-200">
                    {quantity}
                  </span>
                  <button
                    className="bg-gray-200 px-3 py-1 rounded-r"
                    onClick={() => setQuantity((prev) => prev + 1)}
                  >
                    +
                  </button>
                </div>
              </div>

              <button
                onClick={handleAddToCart}
                className="w-full bg-green-600 text-white py-3 rounded-md hover:bg-green-700"
              >
                Tambah ke Keranjang
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
export default ProductDetail;
import React, { useState, useEffect } from "react";
import { useAuth } from "../context/AuthContext";
import ProductCard from "../components/buyer/ProductCard";
import { fetchProducts } from "../services/productService";

const ProductList: React.FC = () => {
  const [products, setProducts] = useState<any[]>([]);
  const [filters, setFilters] = useState({
    location: "",
    tag: "",
    sort: "",
  });
  const { user } = useAuth();

  useEffect(() => {
    const loadProducts = async () => {
      try {
        const data = await fetchProducts(filters);
        setProducts(data);
      } catch (error) {
        console.error("Failed to load products", error);
      }
    };

    if (user) loadProducts();
  }, [filters, user]);

  const handleFilterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilters({ ...filters, [e.target.name]: e.target.value });
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex flex-col md:flex-row justify-between mb-6">
        <h1 className="text-3xl font-bold mb-4">Daftar Produk</h1>

        <div className="flex flex-wrap gap-4">
          <select
            name="location"
            onChange={handleFilterChange}
            className="border rounded p-2"
          >
            <option value="">Semua Lokasi</option>
            {/* Populate with Jawa Tengah kabupaten */}
          </select>

          <select
            name="tag"
            onChange={handleFilterChange}
            className="border rounded p-2"
          >
            <option value="">Semua Kategori</option>
            {/* Populate with tags */}
          </select>

          <select
            name="sort"
            onChange={handleFilterChange}
            className="border rounded p-2"
          >
            <option value="">Urutkan</option>
            <option value="popular">Terpopuler</option>
            <option value="lowest">Harga Terendah</option>
            <option value="highest">Harga Tertinggi</option>
          </select>
        </div>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {products.map((product) => (
          <ProductCard key={product.id} product={product} />
        ))}
      </div>
    </div>
  );
};

export default ProductList;
import React from "react";
import { useAuth } from "../context/AuthContext";

const Profile: React.FC = () => {
  const { user } = useAuth();

  if (!user) return null;

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Profil Saya</h1>

      <div className="bg-white shadow rounded-lg p-6 max-w-3xl">
        <div className="flex flex-col md:flex-row items-center mb-6">
          <div className="bg-gray-200 border-2 border-dashed rounded-xl w-32 h-32 mb-4 md:mb-0 md:mr-6" />
          <div>
            <h2 className="text-2xl font-bold">{user.name}</h2>
            <p className="text-gray-600">{user.email}</p>
            <p className="text-gray-600">{user.phone}</p>
            <p className="text-gray-600 capitalize">{user.role}</p>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <h3 className="font-semibold mb-2">Informasi Pribadi</h3>
            <div className="space-y-2">
              <p>
                <span className="font-medium">Nama:</span> {user.name}
              </p>
              <p>
                <span className="font-medium">Email:</span> {user.email}
              </p>
              <p>
                <span className="font-medium">No. HP:</span> {user.phone}
              </p>
              <p>
                <span className="font-medium">Peran:</span> {user.role}
              </p>
            </div>
          </div>

          {user.role === "farmer" && (
            <div>
              <h3 className="font-semibold mb-2">Informasi Petani</h3>
              <div className="space-y-2">
                <p>
                  <span className="font-medium">Lokasi:</span> {user.location}
                </p>
                <p>
                  <span className="font-medium">Deskripsi:</span>{" "}
                  {user.description}
                </p>
              </div>
            </div>
          )}
        </div>

        <div>
          <button className="bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700">
            Edit Profil
          </button>
        </div>
      </div>
    </div>
  );
};

export default Profile;
import axios from "axios";

const API_URL = "/api";

const api = axios.create({
  baseURL: API_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) {
      config.headers["Authorization"] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  },
);

export default api;
import api from "./api";

export const loginUser = async (email: string, password: string) => {
  const response = await api.post("/auth/login", { email, password });
  return response.data;
};

export const registerUser = async (data: any) => {
  const response = await api.post("/auth/register", data);
  return response.data;
};

export const getProfile = async () => {
  const response = await api.get("/auth/profile");
  return response.data;
};

export const fetchFarmerProfile = async (id: string) => {
  const response = await api.get(`/farmer/profile/${id}`);
  return response.data;
};

export const fetchFarmerProducts = async (id: string) => {
  const response = await api.get(`/farmer/products/${id}`);
  return response.data;
};

export const refreshToken = async () => {
  const response = await api.post("/auth/refresh");
  return response.data;
};
import api from "./api";

export interface Notification {
  id: string;
  message: string;
  read: boolean;
  createdAt: string;
  type: string;
  referenceId?: string;
}

/**
 * Mengambil semua notifikasi untuk user yang sedang login
 * @returns Promise array of Notification
 */
export const getNotifications = async (): Promise<Notification[]> => {
  try {
    const response = await api.get("/notifications");
    return response.data;
  } catch (error) {
    console.error("Failed to fetch notifications", error);
    throw new Error("Gagal mengambil notifikasi. Silakan coba lagi nanti.");
  }
};

/**
 * Menandai notifikasi sebagai sudah dibaca
 * @param id ID notifikasi
 * @returns Promise Notification yang sudah diupdate
 */
export const markNotificationAsRead = async (
  id: string,
): Promise<Notification> => {
  try {
    const response = await api.put(`/notifications/${id}/read`);
    return response.data;
  } catch (error) {
    console.error("Failed to mark notification as read", error);
    throw new Error("Gagal menandai notifikasi sebagai dibaca.");
  }
};

/**
 * Mengambil jumlah notifikasi yang belum dibaca
 * @returns Promise jumlah notifikasi belum dibaca
 */
export const getUnreadCount = async (): Promise<number> => {
  try {
    const response = await api.get("/notifications/unread-count");
    return response.data.count;
  } catch (error) {
    console.error("Failed to get unread count", error);
    return 0;
  }
};

/**
 * Mengatur koneksi WebSocket untuk notifikasi real-time
 * @param onNewNotification Callback untuk notifikasi baru
 * @returns Fungsi cleanup untuk menutup koneksi
 */
export const setupNotificationSocket = (
  onNewNotification: (notification: Notification) => void,
): (() => void) => {
  // Implementasi nyata menggunakan WebSocket
  const socketUrl = process.env.REACT_APP_WS_URL || "ws://localhost:5000";

  try {
    const socket = new WebSocket(
      `${socketUrl}?token=${localStorage.getItem("token")}`,
    );

    // Event handler untuk koneksi terbuka
    socket.addEventListener("open", () => {
      console.log("WebSocket connected");
    });

    // Event handler untuk pesan masuk
    socket.addEventListener("message", (event) => {
      try {
        const message = JSON.parse(event.data);

        if (message.type === "notification") {
          onNewNotification(message.data);
        }
      } catch (error) {
        console.error("Failed to parse WebSocket message", error);
      }
    });

    // Event handler untuk error
    socket.addEventListener("error", (error) => {
      console.error("WebSocket error:", error);
    });

    // Event handler untuk koneksi tertutup
    socket.addEventListener("close", () => {
      console.log("WebSocket disconnected");
    });

    // Fungsi untuk menutup koneksi
    return () => {
      if (socket.readyState === WebSocket.OPEN) {
        socket.close();
      }
    };
  } catch (error) {
    console.error("Failed to setup WebSocket", error);

    // Fallback: Simulasi notifikasi jika WebSocket gagal
    console.warn("Using mock notification system");

    const mockNotifications: Notification[] = [
      {
        id: "mock1",
        message: "Pesanan baru #123 dari Budi",
        read: false,
        createdAt: new Date().toISOString(),
        type: "order",
      },
      {
        id: "mock2",
        message: "Pesanan #120 telah dibayar",
        read: false,
        createdAt: new Date().toISOString(),
        type: "order",
      },
    ];

    // Simulasikan notifikasi baru setiap 30 detik
    const interval = setInterval(() => {
      if (mockNotifications.length > 0) {
        const notification = mockNotifications.shift();
        if (notification) {
          onNewNotification(notification);
        }
      }
    }, 30000);

    // Fungsi untuk membersihkan interval
    return () => clearInterval(interval);
  }
};

/***
 * Mengirim notifikasi via WebSocket
 * @param notification Notifikasi yang akan dikirim
 */
export const sendNotification = (notification: Notification) => {
  // Diimplementasikan di backend, fungsi ini hanya untuk demonstrasi
  console.log("Notification sent via WebSocket:", notification);
};

/**
 * Mengambil notifikasi berdasarkan ID
 * @param id ID notifikasi
 * @returns Promise Notification
 */
export const getNotificationById = async (
  id: string,
): Promise<Notification> => {
  try {
    const response = await api.get(`/notifications/${id}`);
    return response.data;
  } catch (error) {
    console.error("Failed to fetch notification", error);
    throw new Error("Gagal mengambil detail notifikasi.");
  }
};

/**
 * Menghapus notifikasi
 * @param id ID notifikasi
 * @returns Promise void
 */
export const deleteNotification = async (id: string): Promise<void> => {
  try {
    await api.delete(`/notifications/${id}`);
  } catch (error) {
    console.error("Failed to delete notification", error);
    throw new Error("Gagal menghapus notifikasi.");
  }
};

/**
 * Mengambil notifikasi berdasarkan referensi ID
 * @param referenceId ID referensi
 * @returns Promise array of Notification
 */
export const getNotificationsByReference = async (
  referenceId: string,
): Promise<Notification[]> => {
  try {
    const response = await api.get(`/notifications?referenceId=${referenceId}`);
    return response.data;
  } catch (error) {
    console.error("Failed to fetch notifications by reference", error);
    throw new Error("Gagal mengambil notifikasi terkait.");
  }
};
import api from "./api";

export const createOrder = async (orderData: any) => {
  const response = await api.post("/buyer/orders", orderData);
  return response.data;
};

export const fetchOrders = async () => {
  const response = await api.get("/farmer/orders");
  return response.data;
};

export const updateOrderStatus = async (id: string, status: string) => {
  const response = await api.put(`/farmer/orders/${id}`, { status });
  return response.data;
};
import api from "./api";

export const fetchProducts = async (filters: any) => {
  const response = await api.get("/products", { params: filters });
  return response.data;
};

export const fetchProductById = async (id: string) => {
  const response = await api.get(`/products/${id}`);
  return response.data;
};

export const createProduct = async (productData: any) => {
  const response = await api.post("/farmer/products", productData);
  return response.data;
};

export const updateProduct = async (id: string, productData: any) => {
  const response = await api.put(`/farmer/products/${id}`, productData);
  return response.data;
};

export const deleteProduct = async (id: string) => {
  const response = await api.delete(`/farmer/products/${id}`);
  return response.data;
};
export interface User {
  id: string;
  name: string;
  email: string;
  phone: string;
  role: "buyer" | "farmer";
  location?: string;
  description?: string;
}
export interface Product {
  id: string;
  name: string;
  image: string;
  price: number;
  tags: string[];
  farmer: {
    id: string;
    name: string;
    location: string;
  };
}
export interface CartItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
  farmer: string;
}
export interface Order {
  id: string;
  items: CartItem[];
  total: number;
  status: "pending" | "accepted" | "rejected";
  createdAt: string;
}

export interface Notification {
  id: string;
  message: string;
  read: boolean;
  createdAt: string;
  type: string;
  referenceId?: string;
}
export const KABUPATEN_LIST = [
  "Cilacap",
  "Banyumas",
  "Purbalingga",
  "Banjarnegara",
  "Kebumen",
  "Purworejo",
  "Wonosobo",
  "Magelang",
  "Boyolali",
  "Klaten",
  "Sukoharjo",
  "Wonogiri",
  "Karanganyar",
  "Sragen",
  "Grobogan",
  "Blora",
  "Rembang",
  "Pati",
  "Kudus",
  "Jepara",
  "Demak",
  "Semarang",
  "Temanggung",
  "Kendal",
  "Batang",
  "Pekalongan",
  "Pemalang",
  "Tegal",
  "Brebes",
];
module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};
{
  "compilerOptions": {
     "baseUrl": ".",
    "paths": {
      "*": ["src/*"]
    }
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}
{
  "routes": [
    {
      "src": "/api/(.*)",
      "dest": "http://8.215.100.141:4001/api/$1"
    },
    {
      "src": "/static/(.*)",
      "headers": {
        "Content-Type": "text/css"
      }
    },
    {
      "src": "/(.*)",
      "dest": "/index.html",
      "status": 200
    }
  ]
}
